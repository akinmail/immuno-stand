package com.akinmail.blockchain.immune.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class Immunization_sol_Immunization extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_UPDATECHILD = "updateChild";

    public static final String FUNC_REGISTERCHILD = "registerChild";

    public static final String FUNC_GETCHILD = "getChild";

    protected Immunization_sol_Immunization(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Immunization_sol_Immunization(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<TransactionReceipt> updateChild(String detailsHash, BigInteger planCode, BigInteger countcompleted) {
        final Function function = new Function(
                FUNC_UPDATECHILD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(detailsHash), 
                new org.web3j.abi.datatypes.generated.Uint256(planCode), 
                new org.web3j.abi.datatypes.generated.Uint256(countcompleted)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> registerChild(String childname, String mothername, String dob, BigInteger phoneNumber, String detailshash) {
        final Function function = new Function(
                FUNC_REGISTERCHILD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(childname), 
                new org.web3j.abi.datatypes.Utf8String(mothername), 
                new org.web3j.abi.datatypes.Utf8String(dob), 
                new org.web3j.abi.datatypes.generated.Uint256(phoneNumber), 
                new org.web3j.abi.datatypes.Utf8String(detailshash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getChild(String detailsHash) {
        final Function function = new Function(
                FUNC_GETCHILD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(detailsHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<Immunization_sol_Immunization> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Immunization_sol_Immunization.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Immunization_sol_Immunization> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Immunization_sol_Immunization.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Immunization_sol_Immunization load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Immunization_sol_Immunization(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Immunization_sol_Immunization load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Immunization_sol_Immunization(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
